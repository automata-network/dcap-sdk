// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.25.6
// source: network.proto

package sp1_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProofMode int32

const (
	ProofMode_UnspecifiedProofMode ProofMode = 0
	// / The core proof mode.
	ProofMode_Core ProofMode = 1
	// / The compressed proof mode.
	ProofMode_Compressed ProofMode = 2
	// / The plonk proof mode.
	ProofMode_Plonk ProofMode = 3
	// / The groth16 proof mode.
	ProofMode_Groth16 ProofMode = 4
)

// Enum value maps for ProofMode.
var (
	ProofMode_name = map[int32]string{
		0: "UnspecifiedProofMode",
		1: "Core",
		2: "Compressed",
		3: "Plonk",
		4: "Groth16",
	}
	ProofMode_value = map[string]int32{
		"UnspecifiedProofMode": 0,
		"Core":                 1,
		"Compressed":           2,
		"Plonk":                3,
		"Groth16":              4,
	}
)

func (x ProofMode) Enum() *ProofMode {
	p := new(ProofMode)
	*p = x
	return p
}

func (x ProofMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProofMode) Descriptor() protoreflect.EnumDescriptor {
	return file_network_proto_enumTypes[0].Descriptor()
}

func (ProofMode) Type() protoreflect.EnumType {
	return &file_network_proto_enumTypes[0]
}

func (x ProofMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProofMode.Descriptor instead.
func (ProofMode) EnumDescriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{0}
}

type FulfillmentStrategy int32

const (
	FulfillmentStrategy_UnspecifiedFulfillmentStrategy FulfillmentStrategy = 0
	// / The hosted fulfillment strategy. Uses Succinct's on-demand prover to fulfill requests.
	FulfillmentStrategy_Hosted FulfillmentStrategy = 1
	// / The reserved fulfillment strategy. Uses an already existing agreement with a
	// / fulfiller to fulfill requests.
	FulfillmentStrategy_Reserved FulfillmentStrategy = 2
	// / The auction fulfillment strategy. Uses a decentralized proof contest to
	// / fulfill requests.
	FulfillmentStrategy_Auction FulfillmentStrategy = 3
)

// Enum value maps for FulfillmentStrategy.
var (
	FulfillmentStrategy_name = map[int32]string{
		0: "UnspecifiedFulfillmentStrategy",
		1: "Hosted",
		2: "Reserved",
		3: "Auction",
	}
	FulfillmentStrategy_value = map[string]int32{
		"UnspecifiedFulfillmentStrategy": 0,
		"Hosted":                         1,
		"Reserved":                       2,
		"Auction":                        3,
	}
)

func (x FulfillmentStrategy) Enum() *FulfillmentStrategy {
	p := new(FulfillmentStrategy)
	*p = x
	return p
}

func (x FulfillmentStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FulfillmentStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_network_proto_enumTypes[1].Descriptor()
}

func (FulfillmentStrategy) Type() protoreflect.EnumType {
	return &file_network_proto_enumTypes[1]
}

func (x FulfillmentStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FulfillmentStrategy.Descriptor instead.
func (FulfillmentStrategy) EnumDescriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{1}
}

type MessageFormat int32

const (
	// / Unspecified message format.
	MessageFormat_UnspecifiedMessageFormat MessageFormat = 0
	// / The message is in binary format.
	MessageFormat_Binary MessageFormat = 1
	// / The message is in JSON format.
	MessageFormat_Json MessageFormat = 2
)

// Enum value maps for MessageFormat.
var (
	MessageFormat_name = map[int32]string{
		0: "UnspecifiedMessageFormat",
		1: "Binary",
		2: "Json",
	}
	MessageFormat_value = map[string]int32{
		"UnspecifiedMessageFormat": 0,
		"Binary":                   1,
		"Json":                     2,
	}
)

func (x MessageFormat) Enum() *MessageFormat {
	p := new(MessageFormat)
	*p = x
	return p
}

func (x MessageFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_network_proto_enumTypes[2].Descriptor()
}

func (MessageFormat) Type() protoreflect.EnumType {
	return &file_network_proto_enumTypes[2]
}

func (x MessageFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageFormat.Descriptor instead.
func (MessageFormat) EnumDescriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{2}
}

type FulfillmentStatus int32

const (
	FulfillmentStatus_UnspecifiedFulfillmentStatus FulfillmentStatus = 0
	// / The request has been requested.
	FulfillmentStatus_Requested FulfillmentStatus = 1
	// / The request has been assigned to a fulfiller.
	FulfillmentStatus_Assigned FulfillmentStatus = 2
	// / The request has been fulfilled.
	FulfillmentStatus_Fulfilled FulfillmentStatus = 3
	// / The request cannot be fulfilled.
	FulfillmentStatus_Unfulfillable FulfillmentStatus = 4
)

// Enum value maps for FulfillmentStatus.
var (
	FulfillmentStatus_name = map[int32]string{
		0: "UnspecifiedFulfillmentStatus",
		1: "Requested",
		2: "Assigned",
		3: "Fulfilled",
		4: "Unfulfillable",
	}
	FulfillmentStatus_value = map[string]int32{
		"UnspecifiedFulfillmentStatus": 0,
		"Requested":                    1,
		"Assigned":                     2,
		"Fulfilled":                    3,
		"Unfulfillable":                4,
	}
)

func (x FulfillmentStatus) Enum() *FulfillmentStatus {
	p := new(FulfillmentStatus)
	*p = x
	return p
}

func (x FulfillmentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FulfillmentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_network_proto_enumTypes[3].Descriptor()
}

func (FulfillmentStatus) Type() protoreflect.EnumType {
	return &file_network_proto_enumTypes[3]
}

func (x FulfillmentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FulfillmentStatus.Descriptor instead.
func (FulfillmentStatus) EnumDescriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{3}
}

type ExecutionStatus int32

const (
	ExecutionStatus_UnspecifiedExecutionStatus ExecutionStatus = 0
	// / The request has not been executed.
	ExecutionStatus_Unexecuted ExecutionStatus = 1
	// / The request has been executed.
	ExecutionStatus_Executed ExecutionStatus = 2
	// / The request cannot be executed.
	ExecutionStatus_Unexecutable ExecutionStatus = 3
)

// Enum value maps for ExecutionStatus.
var (
	ExecutionStatus_name = map[int32]string{
		0: "UnspecifiedExecutionStatus",
		1: "Unexecuted",
		2: "Executed",
		3: "Unexecutable",
	}
	ExecutionStatus_value = map[string]int32{
		"UnspecifiedExecutionStatus": 0,
		"Unexecuted":                 1,
		"Executed":                   2,
		"Unexecutable":               3,
	}
)

func (x ExecutionStatus) Enum() *ExecutionStatus {
	p := new(ExecutionStatus)
	*p = x
	return p
}

func (x ExecutionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_network_proto_enumTypes[4].Descriptor()
}

func (ExecutionStatus) Type() protoreflect.EnumType {
	return &file_network_proto_enumTypes[4]
}

func (x ExecutionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionStatus.Descriptor instead.
func (ExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{4}
}

type GetNonceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       []byte                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNonceRequest) Reset() {
	*x = GetNonceRequest{}
	mi := &file_network_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNonceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNonceRequest) ProtoMessage() {}

func (x *GetNonceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNonceRequest.ProtoReflect.Descriptor instead.
func (*GetNonceRequest) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{0}
}

func (x *GetNonceRequest) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

type GetNonceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nonce         uint64                 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNonceResponse) Reset() {
	*x = GetNonceResponse{}
	mi := &file_network_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNonceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNonceResponse) ProtoMessage() {}

func (x *GetNonceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNonceResponse.ProtoReflect.Descriptor instead.
func (*GetNonceResponse) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{1}
}

func (x *GetNonceResponse) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type RequestProofRequestBody struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / The account nonce of the sender.
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// / The verification key hash of the program.
	VkHash []byte `protobuf:"bytes,2,opt,name=vk_hash,json=vkHash,proto3" json:"vk_hash,omitempty"`
	// / The version of the prover to use.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// / The mode for the request.
	Mode ProofMode `protobuf:"varint,4,opt,name=mode,proto3,enum=network.ProofMode" json:"mode,omitempty"`
	// / The strategy for fulfiller assignment.
	Strategy FulfillmentStrategy `protobuf:"varint,5,opt,name=strategy,proto3,enum=network.FulfillmentStrategy" json:"strategy,omitempty"`
	// / The stdin resource identifier.
	StdinUri string `protobuf:"bytes,6,opt,name=stdin_uri,json=stdinUri,proto3" json:"stdin_uri,omitempty"`
	// / The deadline for the request.
	Deadline uint64 `protobuf:"varint,7,opt,name=deadline,proto3" json:"deadline,omitempty"`
	// / The cycle limit for the request.
	CycleLimit    uint64 `protobuf:"varint,8,opt,name=cycle_limit,json=cycleLimit,proto3" json:"cycle_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestProofRequestBody) Reset() {
	*x = RequestProofRequestBody{}
	mi := &file_network_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestProofRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestProofRequestBody) ProtoMessage() {}

func (x *RequestProofRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestProofRequestBody.ProtoReflect.Descriptor instead.
func (*RequestProofRequestBody) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{2}
}

func (x *RequestProofRequestBody) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *RequestProofRequestBody) GetVkHash() []byte {
	if x != nil {
		return x.VkHash
	}
	return nil
}

func (x *RequestProofRequestBody) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RequestProofRequestBody) GetMode() ProofMode {
	if x != nil {
		return x.Mode
	}
	return ProofMode_UnspecifiedProofMode
}

func (x *RequestProofRequestBody) GetStrategy() FulfillmentStrategy {
	if x != nil {
		return x.Strategy
	}
	return FulfillmentStrategy_UnspecifiedFulfillmentStrategy
}

func (x *RequestProofRequestBody) GetStdinUri() string {
	if x != nil {
		return x.StdinUri
	}
	return ""
}

func (x *RequestProofRequestBody) GetDeadline() uint64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *RequestProofRequestBody) GetCycleLimit() uint64 {
	if x != nil {
		return x.CycleLimit
	}
	return 0
}

type RequestProofRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / The message format of the body.
	Format MessageFormat `protobuf:"varint,1,opt,name=format,proto3,enum=network.MessageFormat" json:"format,omitempty"`
	// / The signature of the sender.
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// / The body of the request.
	Body          *RequestProofRequestBody `protobuf:"bytes,3,opt,name=body,proto3,oneof" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestProofRequest) Reset() {
	*x = RequestProofRequest{}
	mi := &file_network_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestProofRequest) ProtoMessage() {}

func (x *RequestProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestProofRequest.ProtoReflect.Descriptor instead.
func (*RequestProofRequest) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{3}
}

func (x *RequestProofRequest) GetFormat() MessageFormat {
	if x != nil {
		return x.Format
	}
	return MessageFormat_UnspecifiedMessageFormat
}

func (x *RequestProofRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RequestProofRequest) GetBody() *RequestProofRequestBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type RequestProofResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	TxHash        []byte                    `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Body          *RequestProofResponseBody `protobuf:"bytes,2,opt,name=body,proto3,oneof" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestProofResponse) Reset() {
	*x = RequestProofResponse{}
	mi := &file_network_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestProofResponse) ProtoMessage() {}

func (x *RequestProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestProofResponse.ProtoReflect.Descriptor instead.
func (*RequestProofResponse) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{4}
}

func (x *RequestProofResponse) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *RequestProofResponse) GetBody() *RequestProofResponseBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type RequestProofResponseBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     []byte                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestProofResponseBody) Reset() {
	*x = RequestProofResponseBody{}
	mi := &file_network_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestProofResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestProofResponseBody) ProtoMessage() {}

func (x *RequestProofResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestProofResponseBody.ProtoReflect.Descriptor instead.
func (*RequestProofResponseBody) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{5}
}

func (x *RequestProofResponseBody) GetRequestId() []byte {
	if x != nil {
		return x.RequestId
	}
	return nil
}

type GetProofRequestStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     []byte                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProofRequestStatusRequest) Reset() {
	*x = GetProofRequestStatusRequest{}
	mi := &file_network_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProofRequestStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProofRequestStatusRequest) ProtoMessage() {}

func (x *GetProofRequestStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProofRequestStatusRequest.ProtoReflect.Descriptor instead.
func (*GetProofRequestStatusRequest) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{6}
}

func (x *GetProofRequestStatusRequest) GetRequestId() []byte {
	if x != nil {
		return x.RequestId
	}
	return nil
}

type GetProofRequestStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / The fulfillment status of the request.
	FulfillmentStatus FulfillmentStatus `protobuf:"varint,1,opt,name=fulfillment_status,json=fulfillmentStatus,proto3,enum=network.FulfillmentStatus" json:"fulfillment_status,omitempty"`
	// / The execution status of the request.
	ExecutionStatus ExecutionStatus `protobuf:"varint,2,opt,name=execution_status,json=executionStatus,proto3,enum=network.ExecutionStatus" json:"execution_status,omitempty"`
	// / The transaction hash of the request.
	RequestTxHash []byte `protobuf:"bytes,3,opt,name=request_tx_hash,json=requestTxHash,proto3" json:"request_tx_hash,omitempty"`
	// / The deadline of the request. A request should be ignored if it is past
	// / its deadline.
	Deadline uint64 `protobuf:"varint,4,opt,name=deadline,proto3" json:"deadline,omitempty"`
	// / The optional transaction hash of the proof fulfill. Only included if the
	// / request has a fulfillment status of FULFILLED.
	FulfillTxHash []byte `protobuf:"bytes,5,opt,name=fulfill_tx_hash,json=fulfillTxHash,proto3,oneof" json:"fulfill_tx_hash,omitempty"`
	// / The optional proof URI, where you can download the result of the request.
	// / Only included if the request has a fulfillment status of FULFILLED.
	ProofUri *string `protobuf:"bytes,6,opt,name=proof_uri,json=proofUri,proto3,oneof" json:"proof_uri,omitempty"`
	// / The optional public values hash from the execution of the request. Only
	// / included if the request has an execution status of EXECUTED.
	PublicValuesHash []byte `protobuf:"bytes,7,opt,name=public_values_hash,json=publicValuesHash,proto3,oneof" json:"public_values_hash,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetProofRequestStatusResponse) Reset() {
	*x = GetProofRequestStatusResponse{}
	mi := &file_network_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProofRequestStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProofRequestStatusResponse) ProtoMessage() {}

func (x *GetProofRequestStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProofRequestStatusResponse.ProtoReflect.Descriptor instead.
func (*GetProofRequestStatusResponse) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{7}
}

func (x *GetProofRequestStatusResponse) GetFulfillmentStatus() FulfillmentStatus {
	if x != nil {
		return x.FulfillmentStatus
	}
	return FulfillmentStatus_UnspecifiedFulfillmentStatus
}

func (x *GetProofRequestStatusResponse) GetExecutionStatus() ExecutionStatus {
	if x != nil {
		return x.ExecutionStatus
	}
	return ExecutionStatus_UnspecifiedExecutionStatus
}

func (x *GetProofRequestStatusResponse) GetRequestTxHash() []byte {
	if x != nil {
		return x.RequestTxHash
	}
	return nil
}

func (x *GetProofRequestStatusResponse) GetDeadline() uint64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *GetProofRequestStatusResponse) GetFulfillTxHash() []byte {
	if x != nil {
		return x.FulfillTxHash
	}
	return nil
}

func (x *GetProofRequestStatusResponse) GetProofUri() string {
	if x != nil && x.ProofUri != nil {
		return *x.ProofUri
	}
	return ""
}

func (x *GetProofRequestStatusResponse) GetPublicValuesHash() []byte {
	if x != nil {
		return x.PublicValuesHash
	}
	return nil
}

var File_network_proto protoreflect.FileDescriptor

var file_network_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x2b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x28, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22,
	0x9e, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x76, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x08,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x64, 0x69, 0x6e,
	0x55, 0x72, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xa7, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x74, 0x0a, 0x14, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3a, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0x39, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xae, 0x03, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x12,
	0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x2b, 0x0a, 0x0f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x75, 0x6c,
	0x66, 0x69, 0x6c, 0x6c, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x55, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x10, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x61, 0x73, 0x68, 0x88,
	0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x74,
	0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x5f, 0x75, 0x72, 0x69, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x2a, 0x57, 0x0a, 0x09, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x6f, 0x64, 0x65,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x6f, 0x72, 0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x50, 0x6c, 0x6f, 0x6e, 0x6b, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x74, 0x68,
	0x31, 0x36, 0x10, 0x04, 0x2a, 0x60, 0x0a, 0x13, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x22, 0x0a, 0x1e, 0x55,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x2a, 0x43, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x73, 0x6f, 0x6e, 0x10, 0x02, 0x2a, 0x74, 0x0a, 0x11, 0x46,
	0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x1c, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46,
	0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x55, 0x6e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10,
	0x04, 0x2a, 0x61, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x6e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x6e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x10, 0x03, 0x32, 0x85, 0x02, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0d, 0x5a, 0x0b,
	0x2e, 0x2f, 0x73, 0x70, 0x31, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_network_proto_rawDescOnce sync.Once
	file_network_proto_rawDescData []byte
)

func file_network_proto_rawDescGZIP() []byte {
	file_network_proto_rawDescOnce.Do(func() {
		file_network_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_network_proto_rawDesc), len(file_network_proto_rawDesc)))
	})
	return file_network_proto_rawDescData
}

var file_network_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_network_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_network_proto_goTypes = []any{
	(ProofMode)(0),                        // 0: network.ProofMode
	(FulfillmentStrategy)(0),              // 1: network.FulfillmentStrategy
	(MessageFormat)(0),                    // 2: network.MessageFormat
	(FulfillmentStatus)(0),                // 3: network.FulfillmentStatus
	(ExecutionStatus)(0),                  // 4: network.ExecutionStatus
	(*GetNonceRequest)(nil),               // 5: network.GetNonceRequest
	(*GetNonceResponse)(nil),              // 6: network.GetNonceResponse
	(*RequestProofRequestBody)(nil),       // 7: network.RequestProofRequestBody
	(*RequestProofRequest)(nil),           // 8: network.RequestProofRequest
	(*RequestProofResponse)(nil),          // 9: network.RequestProofResponse
	(*RequestProofResponseBody)(nil),      // 10: network.RequestProofResponseBody
	(*GetProofRequestStatusRequest)(nil),  // 11: network.GetProofRequestStatusRequest
	(*GetProofRequestStatusResponse)(nil), // 12: network.GetProofRequestStatusResponse
}
var file_network_proto_depIdxs = []int32{
	0,  // 0: network.RequestProofRequestBody.mode:type_name -> network.ProofMode
	1,  // 1: network.RequestProofRequestBody.strategy:type_name -> network.FulfillmentStrategy
	2,  // 2: network.RequestProofRequest.format:type_name -> network.MessageFormat
	7,  // 3: network.RequestProofRequest.body:type_name -> network.RequestProofRequestBody
	10, // 4: network.RequestProofResponse.body:type_name -> network.RequestProofResponseBody
	3,  // 5: network.GetProofRequestStatusResponse.fulfillment_status:type_name -> network.FulfillmentStatus
	4,  // 6: network.GetProofRequestStatusResponse.execution_status:type_name -> network.ExecutionStatus
	5,  // 7: network.ProverNetwork.GetNonce:input_type -> network.GetNonceRequest
	8,  // 8: network.ProverNetwork.RequestProof:input_type -> network.RequestProofRequest
	11, // 9: network.ProverNetwork.GetProofRequestStatus:input_type -> network.GetProofRequestStatusRequest
	6,  // 10: network.ProverNetwork.GetNonce:output_type -> network.GetNonceResponse
	9,  // 11: network.ProverNetwork.RequestProof:output_type -> network.RequestProofResponse
	12, // 12: network.ProverNetwork.GetProofRequestStatus:output_type -> network.GetProofRequestStatusResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_network_proto_init() }
func file_network_proto_init() {
	if File_network_proto != nil {
		return
	}
	file_network_proto_msgTypes[3].OneofWrappers = []any{}
	file_network_proto_msgTypes[4].OneofWrappers = []any{}
	file_network_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_network_proto_rawDesc), len(file_network_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_network_proto_goTypes,
		DependencyIndexes: file_network_proto_depIdxs,
		EnumInfos:         file_network_proto_enumTypes,
		MessageInfos:      file_network_proto_msgTypes,
	}.Build()
	File_network_proto = out.File
	file_network_proto_goTypes = nil
	file_network_proto_depIdxs = nil
}
