// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: network.proto

package sp1_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProverNetwork_GetNonce_FullMethodName              = "/network.ProverNetwork/GetNonce"
	ProverNetwork_RequestProof_FullMethodName          = "/network.ProverNetwork/RequestProof"
	ProverNetwork_GetProofRequestStatus_FullMethodName = "/network.ProverNetwork/GetProofRequestStatus"
)

// ProverNetworkClient is the client API for ProverNetwork service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProverNetworkClient interface {
	GetNonce(ctx context.Context, in *GetNonceRequest, opts ...grpc.CallOption) (*GetNonceResponse, error)
	RequestProof(ctx context.Context, in *RequestProofRequest, opts ...grpc.CallOption) (*RequestProofResponse, error)
	GetProofRequestStatus(ctx context.Context, in *GetProofRequestStatusRequest, opts ...grpc.CallOption) (*GetProofRequestStatusResponse, error)
}

type proverNetworkClient struct {
	cc grpc.ClientConnInterface
}

func NewProverNetworkClient(cc grpc.ClientConnInterface) ProverNetworkClient {
	return &proverNetworkClient{cc}
}

func (c *proverNetworkClient) GetNonce(ctx context.Context, in *GetNonceRequest, opts ...grpc.CallOption) (*GetNonceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNonceResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetNonce_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) RequestProof(ctx context.Context, in *RequestProofRequest, opts ...grpc.CallOption) (*RequestProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestProofResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_RequestProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetProofRequestStatus(ctx context.Context, in *GetProofRequestStatusRequest, opts ...grpc.CallOption) (*GetProofRequestStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProofRequestStatusResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetProofRequestStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProverNetworkServer is the server API for ProverNetwork service.
// All implementations must embed UnimplementedProverNetworkServer
// for forward compatibility.
type ProverNetworkServer interface {
	GetNonce(context.Context, *GetNonceRequest) (*GetNonceResponse, error)
	RequestProof(context.Context, *RequestProofRequest) (*RequestProofResponse, error)
	GetProofRequestStatus(context.Context, *GetProofRequestStatusRequest) (*GetProofRequestStatusResponse, error)
	mustEmbedUnimplementedProverNetworkServer()
}

// UnimplementedProverNetworkServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProverNetworkServer struct{}

func (UnimplementedProverNetworkServer) GetNonce(context.Context, *GetNonceRequest) (*GetNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNonce not implemented")
}
func (UnimplementedProverNetworkServer) RequestProof(context.Context, *RequestProofRequest) (*RequestProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestProof not implemented")
}
func (UnimplementedProverNetworkServer) GetProofRequestStatus(context.Context, *GetProofRequestStatusRequest) (*GetProofRequestStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProofRequestStatus not implemented")
}
func (UnimplementedProverNetworkServer) mustEmbedUnimplementedProverNetworkServer() {}
func (UnimplementedProverNetworkServer) testEmbeddedByValue()                       {}

// UnsafeProverNetworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProverNetworkServer will
// result in compilation errors.
type UnsafeProverNetworkServer interface {
	mustEmbedUnimplementedProverNetworkServer()
}

func RegisterProverNetworkServer(s grpc.ServiceRegistrar, srv ProverNetworkServer) {
	// If the following call pancis, it indicates UnimplementedProverNetworkServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProverNetwork_ServiceDesc, srv)
}

func _ProverNetwork_GetNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetNonce(ctx, req.(*GetNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_RequestProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).RequestProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_RequestProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).RequestProof(ctx, req.(*RequestProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetProofRequestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProofRequestStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetProofRequestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetProofRequestStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetProofRequestStatus(ctx, req.(*GetProofRequestStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProverNetwork_ServiceDesc is the grpc.ServiceDesc for ProverNetwork service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProverNetwork_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "network.ProverNetwork",
	HandlerType: (*ProverNetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNonce",
			Handler:    _ProverNetwork_GetNonce_Handler,
		},
		{
			MethodName: "RequestProof",
			Handler:    _ProverNetwork_RequestProof_Handler,
		},
		{
			MethodName: "GetProofRequestStatus",
			Handler:    _ProverNetwork_GetProofRequestStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network.proto",
}
