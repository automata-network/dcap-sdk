package sp1

import (
	_ "embed"
	"encoding/hex"
	"fmt"
	"testing"

	"github.com/automata-network/dcap-sdk/packages/godcap/bincode"
	"github.com/chzyer/test"
)

//go:embed test_proof.hex
var testProof string

func TestProof(t *testing.T) {
	defer test.New(t)
	proofBytes, err := hex.DecodeString(testProof)
	test.Nil(err)

	proof, err := bincode.Unmarshal[*SP1ProofWithPublicValues](proofBytes)
	test.Nil(err)

	expectedProof := `SP1ProofWithPublicValues{proof: SP1Proof:Groth16(Groth16Bn254Proof{public_inputs: [119958411021315528499165546876899269229379913254481423658402840236506459594 6491323509238477720501825349795957873885092172830609839753632496623348546898], encoded_proof: 12be99f1b5c25a78746286dd3e981897f665253ed430828867a67780b72d9fda10a5a7b8158928c9bbb5d21d31e3085cc7021149bde809fb33fa3c80bfb5b67f0f9945189c6b1443a929a38f6c9267d635478e3190b81074bdd3122c3a1bca67030fc2357ea739aed6d7756d09205e16af7010929cd406a85e27cf3ff925fe0c0cad1bd96a48970e06301c7633782e4d6ab2f7d31d0378373967503a11f98ab32d5c7cd267b1c804d1fb65d257d6adfd2d40099b2f0313f5dd581c1e4d659bdb02100485b36a8b8c6dd729a2396cba1cb5652a17c1e4a524c69c9a86efdb7415086e9c25d0f12a141c52d2e778f8bf0552aab1be1d088ad072b853dafcc99de6, raw_proof: 12be99f1b5c25a78746286dd3e981897f665253ed430828867a67780b72d9fda10a5a7b8158928c9bbb5d21d31e3085cc7021149bde809fb33fa3c80bfb5b67f0f9945189c6b1443a929a38f6c9267d635478e3190b81074bdd3122c3a1bca67030fc2357ea739aed6d7756d09205e16af7010929cd406a85e27cf3ff925fe0c0cad1bd96a48970e06301c7633782e4d6ab2f7d31d0378373967503a11f98ab32d5c7cd267b1c804d1fb65d257d6adfd2d40099b2f0313f5dd581c1e4d659bdb02100485b36a8b8c6dd729a2396cba1cb5652a17c1e4a524c69c9a86efdb7415086e9c25d0f12a141c52d2e778f8bf0552aab1be1d088ad072b853dafcc99de60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, groth16_vkey_hash: Bytes32(0x090690902a12d1d02c07a1ad25aa76bded5f6499e12a11ba127669501b553998)}), stdin: SP1Stdin(1), public_values: SP1PublicValues{buffer: Buffer{data: [2 85 0 4 0 0 0 129 7 144 192 111 0 0 0 4 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 151 144 216 154 16 33 14 198 150 138 119 60 238 44 160 91 90 169 115 9 243 103 39 169 104 82 123 228 96 111 193 158 111 115 172 206 53 9 70 201 212 106 155 247 166 63 132 48 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 0 0 0 128 231 2 6 0 0 0 0 0 242 221 38 150 246 155 149 6 69 131 43 220 9 95 253 17 36 126 239 246 135 238 172 219 87 165 141 45 219 154 159 148 254 164 12 150 30 25 70 12 0 255 163 20 32 236 188 24 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 9 152 32 69 8 213 141 203 254 190 94 17 196 134 105 247 169 33 172 45 167 68 223 183 208 20 236 223 242 172 223 241 201 246 101 253 173 82 170 218 207 41 106 29 249 144 158 178 56 61 16 2 36 241 113 106 235 67 31 124 179 207 2 129 151 219 216 114 72 127 39 176 246 50 154 177 118 71 220 153 83 199 1 65 9 129 134 52 248 121 230 85 11 198 15 147 238 207 196 47 244 212 146 120 191 219 176 199 126 87 15 68 144 207 241 10 46 225 172 17 251 210 194 180 159 166 207 163 207 26 28 183 85 199 37 34 221 138 104 158 157 71 144 106 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 39 142 117 52 130 151 108 138 115 81 254 33 19 96 156 115 80 212 145 205 174 61 68 158 239 194 2 250 65 178 173 104 64 35 156 194 186 8 76 45 89 75 78 109 171 234 224 252 191 113 201 109 175 13 12 158 207 14 152 16 192 69 121 0 0 0 0 0 103 109 37 47 75 183 229 150 180 4 244 234 82 143 221 118 69 154 77 150 189 217 44 46 190 160 194 2 164 232 106 166 56 180 201 7 47 53 234 55 72 231 1 147 142 5 97 1 214 104 137 103 222 121 185 230 187 217 16 205 219 82 169 122 193 177 48 178 15 167 74 63 50 200 11 151 140 138 214 113 57 93 171 242 66 131 238 249 9 27 195 145 159 211 155 153 21 168 127 26 223 48 97 193 101 192 25 30 38 88 37 106 40 85 202 201 38 127 23 154 175 177 153 12 158 145 141 100 82 129 106 223 153 83 242 69 208 5 185 215 216 227 106 132 42 96 181 30 92 248 91 44 32 114 174 57 124 23 133 53 201 152 91 119 233 195 144 198 108 149 61 1 15 108 254 160 140 245 40 12 187 49 43 6 72 224 201 104 187 210 238 235 114 175 15 159]}}, sp1_version: v3.0.0}`
	test.Equal(expectedProof, fmt.Sprint(proof))
}
